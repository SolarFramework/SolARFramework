pipeline {
    agent {
        label "jenkins-slave-argo-qmake"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', type: 'PT_BRANCH', selectedValue: 'DEFAULT',
                name: 'BRANCH', defaultValue: 'develop', useRepository: '*.git'
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Create a Release')
        booleanParam(name: 'PRE_RELEASE', defaultValue: false, description: 'Create a Pre-Release')
        string(name: 'REMAKEN_VERSION', defaultValue: 'stable', description: 'Remaken version to be used')
        string(name: 'QMAKE_RULES_VERSION', defaultValue: '', description: 'QMake rules version to be used (empty: Rules by default, ?.?.?: Version of the rules, latest: Latest rules on develop branch)')
        booleanParam(name: 'UPLOAD_CONAN_PACKAGE', defaultValue: false, description: 'Upload the conan packages on the conan-solar remote')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests during build')        
    }
    stages {

        stage("SolARFramework"){         
            steps {
                script {
                    BRANCH = BRANCH.replace('/','%252F')
                }
                buildModule("SolARFramework",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
            }
        }

        stage("Build Parallel modules"){
            parallel {
                stage("SolARModuleOpenCV"){
                    steps {
                        buildModule("SolARModuleOpenCV",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                    }
                }
                stage("SolARModuleOpenGL"){
                    steps {
                        buildModule("SolARModuleOpenGL",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                    }
                }
                stage("SolARModuleOpenGV"){
                    steps {
                        buildModule("SolARModuleOpenGV",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                    }
                }
                // stage("SolARModuleCeres"){
                //     steps {
                //         buildModule("SolARModuleCeres",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                //     }
                // }
                // stage("SolARModuleTools"){
                //     steps {
                //         buildModule("SolARModuleTools",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                //     }
                // }
                // stage("SolARModuleFBOW"){
                //     steps {
                //         buildModule("SolARModuleFBOW",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
                //     }
                // }
            }
        }

        // stage("SolARPipelineManager"){
        //     steps {
        //         buildModule("SolARPipelineManager",BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE)
        //     }
        // }
    }
}

def buildModule(NAME,BRANCH,RELEASE,PRE_RELEASE,REMAKEN_VERSION,QMAKE_RULES_VERSION,SKIP_TESTS,UPLOAD_CONAN_PACKAGE) {
    build job: "SolAR-Modules/${NAME}/${BRANCH}", parameters: [booleanParam(name: 'RELEASE', value: RELEASE),booleanParam(name: 'PRE_RELEASE', value: PRE_RELEASE),string(name:'REMAKEN_VERSION', value:REMAKEN_VERSION), string(name:'QMAKE_RULES_VERSION', value:QMAKE_RULES_VERSION),booleanParam(name: 'SKIP_TESTS', value: SKIP_TESTS),booleanParam(name: 'UPLOAD_CONAN_PACKAGE', value: UPLOAD_CONAN_PACKAGE)]
}